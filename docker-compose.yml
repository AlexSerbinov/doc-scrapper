version: '3.8'

services:
  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: doc-scrapper-chromadb
    ports:
      - "8000:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - doc-scrapper-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RAG API Server
  rag-api:
    build:
      context: .
      dockerfile: Dockerfile.rag-api
    container_name: doc-scrapper-rag-api
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - RAG_SERVER_PORT=8001
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - RAG_VECTOR_STORE_CONNECTION_STRING=http://chromadb:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RAG_LLM_MODEL=gpt-4o-mini
      - RAG_EMBEDDING_MODEL=text-embedding-3-small
    volumes:
      - ./scraped-docs:/app/scraped-docs
      - ./dist:/app/dist
    networks:
      - doc-scrapper-network
    depends_on:
      chromadb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Application (Next.js)
  web-app:
    build:
      context: ./web-app
      dockerfile: Dockerfile
    container_name: doc-scrapper-web-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://localhost
      - NEXT_PUBLIC_RAG_API_URL=http://rag-api:8001
      - INTERNAL_RAG_API_URL=http://rag-api:8001
      - INTERNAL_SCRAPER_PATH=/app/dist/cli/scraper.js
    volumes:
      - ./scraped-docs:/app/scraped-docs
      - /app/node_modules
    networks:
      - doc-scrapper-network
    depends_on:
      rag-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy with SSL
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: doc-scrapper-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - doc-scrapper-network
    depends_on:
      - web-app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  chroma_data:
    driver: local

networks:
  doc-scrapper-network:
    driver: bridge 