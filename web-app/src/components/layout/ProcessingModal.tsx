"use client";

import { X, CheckCircle, Loader, AlertCircle } from "lucide-react";
import { useState, useEffect } from "react";

interface ProcessingModalProps {
  isOpen: boolean;
  onClose: () => void;
  url: string;
}

interface ProcessingStep {
  id: string;
  title: string;
  description: string;
  status: 'pending' | 'processing' | 'completed' | 'error';
}

export function ProcessingModal({ isOpen, onClose, url }: ProcessingModalProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [steps, setSteps] = useState<ProcessingStep[]>([
    {
      id: 'analyze',
      title: '–ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Å–∞–π—Ç—É',
      description: '–î–æ—Å–ª—ñ–¥–∂—É—î–º–æ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É —Ç–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –≤–∞—à–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó',
      status: 'pending'
    },
    {
      id: 'scrape',
      title: '–ó–±—ñ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫',
      description: '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó',
      status: 'pending'
    },
    {
      id: 'process',
      title: 'AI –æ–±—Ä–æ–±–∫–∞ —Ç–∞ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è',
      description: '–°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω—É –±–∞–∑—É –∑–Ω–∞–Ω—å –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—à—É–∫—É',
      status: 'pending'
    }
  ]);

  // –°–∏–º—É–ª—è—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—É –æ–±—Ä–æ–±–∫–∏
  useEffect(() => {
    if (!isOpen) return;

    const processSteps = async () => {
      for (let i = 0; i < steps.length; i++) {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –Ω–∞ 'processing'
        setSteps(prev => prev.map((step, stepIndex) => 
          stepIndex === i ? { ...step, status: 'processing' } : step
        ));
        setCurrentStep(i);

        // –°–∏–º—É–ª—é—î–º–æ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ (2-4 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ –∫—Ä–æ–∫)
        await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 2000));

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ 'completed'
        setSteps(prev => prev.map((step, stepIndex) => 
          stepIndex === i ? { ...step, status: 'completed' } : step
        ));
      }

      // –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫—Ä–æ–∫—ñ–≤, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
      setTimeout(() => {
        onClose();
        // TODO: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —á–∞—Ç—É
        console.log("Redirecting to chat...");
      }, 2000);
    };

    processSteps();
  }, [isOpen, onClose, steps.length]);

  // –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ
  useEffect(() => {
    if (!isOpen) {
      setCurrentStep(0);
      setSteps(prev => prev.map(step => ({ ...step, status: 'pending' })));
    }
  }, [isOpen]);

  if (!isOpen) return null;

  const getStepIcon = (status: ProcessingStep['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="w-6 h-6 text-green-400" />;
      case 'processing':
        return <Loader className="w-6 h-6 text-blue-400 animate-spin" />;
      case 'error':
        return <AlertCircle className="w-6 h-6 text-red-400" />;
      default:
        return <div className="w-6 h-6 rounded-full border-2 border-slate-600"></div>;
    }
  };

  const getDomainFromUrl = (url: string) => {
    try {
      return new URL(url).hostname;
    } catch {
      return url;
    }
  };

  return (
    <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-slate-800 rounded-lg shadow-2xl max-w-md w-full p-8 relative">
        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-slate-400 hover:text-slate-200 transition-colors"
          disabled={currentStep < steps.length - 1} // –í–∏–º–∫–Ω—É—Ç–∏ –ø–æ–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        >
          <X className="w-6 h-6" />
        </button>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h2 className="text-2xl font-semibold text-slate-100 mb-3">
            ü™Ñ –ú–∞–≥—ñ—è –ü–æ—á–∞–ª–∞—Å—è!
          </h2>
          <p className="text-slate-300">
            –ì–æ—Ç—É—î–º–æ –í–∞—à–æ–≥–æ AI-–ü–æ–º—ñ—á–Ω–∏–∫–∞ –¥–ª—è
          </p>
          <p className="text-blue-400 font-medium mt-1">
            {getDomainFromUrl(url)}
          </p>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å */}
        <div className="mb-8">
          {/* Progress Bar */}
          <div className="bg-slate-700 rounded-full h-2 mb-6">
            <div 
              className="bg-blue-500 rounded-full h-2 transition-all duration-1000"
              style={{ 
                width: `${((currentStep + (steps[currentStep]?.status === 'completed' ? 1 : 0.5)) / steps.length) * 100}%` 
              }}
            />
          </div>

          {/* –ö—Ä–æ–∫–∏ */}
          <div className="space-y-4">
            {/* eslint-disable-next-line @typescript-eslint/no-unused-vars */}
            {steps.map((step, _index) => (
              <div key={step.id} className="flex items-start gap-3">
                {getStepIcon(step.status)}
                <div className="flex-1">
                  <h3 className={`font-medium ${
                    step.status === 'completed' ? 'text-green-400' : 
                    step.status === 'processing' ? 'text-blue-400' : 
                    'text-slate-300'
                  }`}>
                    {step.title}
                  </h3>
                  <p className="text-sm text-slate-400 mt-1">
                    {step.description}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ç–µ–∫—Å—Ç */}
        <div className="text-center">
          <p className="text-sm text-slate-400">
            –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –≤—ñ–¥ –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Å–µ–∫—É–Ω–¥ –¥–æ –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω, 
            –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –≤–∞—à–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó.
          </p>
          <p className="text-sm text-slate-500 mt-2">
            –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–µ –∑–∞–∫—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.
          </p>
        </div>

        {/* –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è */}
        {steps.every(step => step.status === 'completed') && (
          <div className="mt-6 text-center">
            <div className="bg-green-500/20 border border-green-500/50 rounded-lg p-4">
              <CheckCircle className="w-8 h-8 text-green-400 mx-auto mb-2" />
              <p className="text-green-400 font-medium">
                –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∞—Å –¥–æ —á–∞—Ç—É...
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 